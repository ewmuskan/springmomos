import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Set input shape based on the backend (TensorFlow or Theano)
if K.image_data_format() == 'channels_first':
    input_shape = (1, 28, 28)
else:
    input_shape = (28, 28, 1)

# Reshape the data to fit the CNN input shape
x_train = x_train.reshape(x_train.shape[0], *input_shape)
x_test = x_test.reshape(x_test.shape[0], *input_shape)

# Convert pixel values to float and normalize between 0 and 1
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Convert labels to one-hot encoded vectors
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Build the CNN model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

# Compile the model with categorical cross-entropy loss and Adam optimizer
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])

# Train the model on the training data with 10 epochs and batch size of 128
model.fit(x_train, y_train,
          batch_size=128,
          epochs=10,
          verbose=1,
          validation_data=(x_test, y_test))

# Evaluate the model on the testing data
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])                                                                                                                                                            import tkinter as tk
class Whiteboard:
    def init(self, master):
        self.master = master
        self.master.title("TechTonic's Whiteboard")
        self.master.geometry("400x400")

        # Create a canvas on which to draw
        self.canvas = tk.Canvas(self.master, bg="green", width=400, height=400)
        self.canvas.pack(fill=tk.BOTH, expand=True)

        # Set up the mouse events for drawing
        self.canvas.bind("<Button-1>", self.start_draw)
        self.canvas.bind("<B1-Motion>", self.draw)
        self.canvas.bind("<ButtonRelease-1>", self.end_draw)

        # Set up a clear button to erase the canvas
        self.clear_button = tk.Button(self.master, text="Clear", row=0,column=2,command=self.clear_canvas)
        self.clear_button.grid()
      

        # Keep the window open until the user closes it
        self.master.mainloop()

    def start_draw(self, event):
        self.last_x = event.x
        self.last_y = event.y

    def draw(self, event):
        self.canvas.create_line(self.last_x, self.last_y, event.x, event.y, width=3)
        self.last_x = event.x
        self.last_y = event.y

    def end_draw(self, event):
        pass

    def clear_canvas(self):
        self.canvas.delete("all")

root = tk.Tk()
whiteboard = Whiteboard(root)
