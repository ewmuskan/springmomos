import tkinter as tk
import numpy as np
from PIL import Image, ImageDraw
import keras
from keras.models import load_model

class DigitRecognizer:
    def _init_(self):
        # Load the trained CNN model
        self.model = load_model('mnist_cnn.h5')

    def recognize_digit(self, image):
        # Convert the image to grayscale
        image = image.convert('L')

        # Resize the image to 28x28
        image = image.resize((28, 28))

        # Invert the image (black background, white digits)
        image = ImageOps.invert(image)

        # Convert the image to a numpy array
        image_array = np.array(image)

        # Reshape the array to fit the CNN input shape
        image_array = image_array.reshape(1, 28, 28, 1)

        # Normalize the pixel values
        image_array = image_array.astype('float32') / 255

        # Make the prediction using the trained CNN model
        prediction = self.model.predict(image_array)

        # Get the predicted digit
        digit = np.argmax(prediction)

        return digit


class Whiteboard:
    def _init_(self, master):
        self.master = master
        self.master.title("TechTonic's Whiteboard")
        self.master.geometry("400x400")

        # Create a canvas on which to draw
        self.canvas = tk.Canvas(self.master, bg="green", width=400, height=400)
        self.canvas.pack(fill=tk.BOTH, expand=True)

        # Set up the mouse events for drawing
        self.canvas.bind("<Button-1>", self.start_draw)
        self.canvas.bind("<B1-Motion>", self.draw)
        self.canvas.bind("<ButtonRelease-1>", self.end_draw)

        # Set up a clear button to erase the canvas
        self.clear_button = tk.Button(self.master, text="Clear", row=0, column=2, command=self.clear_canvas)
        self.clear_button.grid()

        # Instantiate the digit recognizer
        self.digit_recognizer = DigitRecognizer()

        # Keep the window open until the user closes it
        self.master.mainloop()

    def start_draw(self, event):
        self.last_x = event.x
        self.last_y = event.y

    def draw(self, event):
        self.canvas.create_line(self.last_x, self.last_y, event.x, event.y, width=3)
        self.last_x = event.x
        self.last_y = event.y

    def end_draw(self, event):
        # Get the image drawn on the canvas
        image = Image.new('RGB', (self.canvas.winfo_width(), self.canvas.winfo_height()), color='white')
        draw = ImageDraw.Draw(image)
        draw.line([(self.last_x, self.last_y), (event.x, event.y)], fill='black', width=3)

        # Recognize the digit in the image
        digit = self.digit_recognizer.recognize_digit(image)

        # Print the recognized digit
        print('Recognized digit:', digit)

    def clear_canvas(self):
        self.canvas.delete("all")
        
